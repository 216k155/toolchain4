--- ../../gcc-5666.3/gcc/gcc.c.orig	2010-10-14 21:27:54.000000000 +0100
+++ ../../gcc-5666.3/gcc/gcc.c	2012-03-18 16:10:40.850511813 +0000
@@ -535,6 +535,7 @@
     :D}   else substitutes D.  There can be as many clauses as you need.
           This may be combined with '.', '!', ',', '|', and '*' as above.
  APPLE LOCAL end mainline 2007-03-13 5040758
+ %J Substitute target_system_root
 
  %(Spec) processes a specification defined in a specs file as *Spec:
  %[Spec] as above, but put __ around -D arguments
@@ -1524,25 +1525,33 @@
 #define MD_STARTFILE_PREFIX_1 ""
 #endif
 
+/* These directories are locations set at configure-time based on the
+   --prefix option provided to configure.  Their initializers are
+   defined in Makefile.in.  These paths are not *directly* used when
+   gcc_exec_prefix is set because, in that case, we know where the
+   compiler has been installed, and use paths relative to that
+   location instead.  */
 static const char *const standard_exec_prefix = STANDARD_EXEC_PREFIX;
+static const char *const standard_libexec_prefix = STANDARD_LIBEXEC_PREFIX;
+static const char *const standard_bindir_prefix = STANDARD_BINDIR_PREFIX;
+static const char *const standard_startfile_prefix = STANDARD_STARTFILE_PREFIX;
+
+/* For native compilers, these are well-known paths containing
+   components that may be provided by the system.  For cross
+   compilers, these paths are not used.  */
 static const char *const standard_exec_prefix_1 = "/usr/libexec/gcc/";
 static const char *const standard_exec_prefix_2 = "/usr/lib/gcc/";
 static const char *md_exec_prefix = MD_EXEC_PREFIX;
-
 static const char *md_startfile_prefix = MD_STARTFILE_PREFIX;
 static const char *md_startfile_prefix_1 = MD_STARTFILE_PREFIX_1;
-static const char *const standard_startfile_prefix = STANDARD_STARTFILE_PREFIX;
 static const char *const standard_startfile_prefix_1
   = STANDARD_STARTFILE_PREFIX_1;
 static const char *const standard_startfile_prefix_2
   = STANDARD_STARTFILE_PREFIX_2;
 
+/* A relative path to be used in finding the location of tools
+   relative to the driver.  */
 static const char *const tooldir_base_prefix = TOOLDIR_BASE_PREFIX;
-static const char *tooldir_prefix;
-
-static const char *const standard_bindir_prefix = STANDARD_BINDIR_PREFIX;
-
-static const char *standard_libexec_prefix = STANDARD_LIBEXEC_PREFIX;
 
 /* Subdirectory to use for locating libraries.  Set by
    set_multilib_dir based on the compilation options.  */
@@ -2805,6 +2814,7 @@
 }
 
 /* Same as add_prefix, but prepending target_system_root to prefix.  */
+/* The target_system_root prefix has been relocated by gcc_exec_prefix.  */
 static void
 add_sysrooted_prefix (struct path_prefix *pprefix, const char *prefix,
 		      const char *component,
@@ -3383,6 +3393,8 @@
   int is_modify_target_name;
   unsigned int j;
 #endif
+  const char *tooldir_prefix;
+  const char *argv_zero = argv[0];
 
   GET_ENVIRONMENT (gcc_exec_prefix, "GCC_EXEC_PREFIX");
 
@@ -3473,15 +3485,54 @@
      see if we can create it from the pathname specified in argv[0].  */
 
   gcc_libexec_prefix = standard_libexec_prefix;
+
+#if defined(__linux__) || defined(__CYGWIN__)
+  {
+      char buf[1024];
+      int len;
+      if ((len = readlink("/proc/self/exe", buf, sizeof(buf)-1)) != -1)
+        {
+          buf[len] = '\0';
+          argv_zero = &buf[0];
+        }
+  }
+#endif
+
 #ifndef VMS
   /* FIXME: make_relative_prefix doesn't yet work for VMS.  */
   if (!gcc_exec_prefix)
     {
-      gcc_exec_prefix = make_relative_prefix (argv[0], standard_bindir_prefix,
+      char* base_prefix;
+      gcc_exec_prefix = make_relative_prefix (argv_zero, standard_bindir_prefix,
 					      standard_exec_prefix);
-      gcc_libexec_prefix = make_relative_prefix (argv[0],
+      gcc_libexec_prefix = make_relative_prefix (argv_zero,
 						 standard_bindir_prefix,
 						 standard_libexec_prefix);
+      /* The bit was horribly broken, set gcc_exec_prefix to what
+         we need. Other darwin cross compilers only work because --with-as and
+         --with-ld are passed into configure. Without those, they'd not work
+         for either relocated or non-relocated compilers. */
+
+      /* Calculate the proper prefix, i.e. a folder up from the executable.
+       * Just to get enough space. */
+      base_prefix = concat (argv_zero, spec_machine, "-", NULL);
+      if (strrchr(base_prefix,DIR_SEPARATOR)!=NULL)
+        {
+          char *bin_prefix;
+          /* Our folder layout isn't a normal gcc layout... */
+          *(strrchr(base_prefix,DIR_SEPARATOR)) = '\0';
+          if (strrchr(base_prefix,DIR_SEPARATOR)!=NULL)
+            {
+          *(strrchr(base_prefix,DIR_SEPARATOR)+1) = '\0';
+          bin_prefix = concat (base_prefix, "bin", dir_separator_str, spec_machine, "-", NULL);
+          /* Add for both gcc and binutils for good measure. */
+          add_prefix (&exec_prefixes, bin_prefix, "GCC",
+                       PREFIX_PRIORITY_LAST, 0, 0);
+          add_prefix (&exec_prefixes, bin_prefix, "BINUTILS",
+                       PREFIX_PRIORITY_LAST, 0, 0);
+          free (bin_prefix);
+        }
+       }
       if (gcc_exec_prefix)
 	putenv (concat ("GCC_EXEC_PREFIX=", gcc_exec_prefix, NULL));
     }
@@ -3495,10 +3546,18 @@
       gcc_libexec_prefix = make_relative_prefix (tmp_prefix,
 						 standard_exec_prefix,
 						 standard_libexec_prefix);
+
+      /* The path is unrelocated, so fallback to the original setting.  */
+      if (!gcc_libexec_prefix)
+	gcc_libexec_prefix = standard_libexec_prefix;
+
       free (tmp_prefix);
     }
 #else
 #endif
+  /* From this point onward, gcc_exec_prefix is non-null if the toolchain
+     is relocated. The toolchain was either relocated using GCC_EXEC_PREFIX
+     or an automatically created GCC_EXEC_PREFIX from argv[0].  */
 
   if (gcc_exec_prefix)
     {
@@ -4103,12 +4162,15 @@
       use_pipes = 0;
     }
 
-  /* Set up the search paths before we go looking for config files.  */
+  /* Set up the search paths.  We add directories that we expect to
+     contain GNU Toolchain components before directories specified by
+     the machine description so that we will find GNU components (like
+     the GNU assembler) before those of the host system.  */
 
-  /* These come before the md prefixes so that we will find gcc's subcommands
-     (such as cpp) rather than those of the host system.  */
-  /* Use 2 as fourth arg meaning try just the machine as a suffix,
-     as well as trying the machine and the version.  */
+  /* If we don't know where the toolchain has been installed, use the
+     configured-in locations.  */
+  if (!gcc_exec_prefix)
+    {
 #ifndef OS2
   add_prefix (&exec_prefixes, standard_libexec_prefix, "GCC",
 	      PREFIX_PRIORITY_LAST, 1, 0);
@@ -4116,51 +4178,35 @@
 	      PREFIX_PRIORITY_LAST, 2, 0);
   add_prefix (&exec_prefixes, standard_exec_prefix, "BINUTILS",
 	      PREFIX_PRIORITY_LAST, 2, 0);
+#endif
+      add_prefix (&startfile_prefixes, standard_exec_prefix, "BINUTILS",
+		  PREFIX_PRIORITY_LAST, 1, 0);
+    }
+  /* If not cross-compiling, search well-known system locations.  */
+  if (*cross_compile == '0')
+    {
+#ifndef OS2
   add_prefix (&exec_prefixes, standard_exec_prefix_1, "BINUTILS",
 	      PREFIX_PRIORITY_LAST, 2, 0);
   add_prefix (&exec_prefixes, standard_exec_prefix_2, "BINUTILS",
 	      PREFIX_PRIORITY_LAST, 2, 0);
 #endif
-
-  add_prefix (&startfile_prefixes, standard_exec_prefix, "BINUTILS",
-	      PREFIX_PRIORITY_LAST, 1, 0);
   add_prefix (&startfile_prefixes, standard_exec_prefix_2, "BINUTILS",
 	      PREFIX_PRIORITY_LAST, 1, 0);
+    }
 
+  gcc_assert (!IS_ABSOLUTE_PATH (tooldir_base_prefix));
   tooldir_prefix = concat (tooldir_base_prefix, spec_machine,
 			   dir_separator_str, NULL);
 
-  /* If tooldir is relative, base it on exec_prefixes.  A relative
-     tooldir lets us move the installed tree as a unit.
-
-     If GCC_EXEC_PREFIX is defined, then we want to add two relative
-     directories, so that we can search both the user specified directory
-     and the standard place.  */
-
-  if (!IS_ABSOLUTE_PATH (tooldir_prefix))
-    {
-      if (gcc_exec_prefix)
-	{
-	  char *gcc_exec_tooldir_prefix
-	    = concat (gcc_exec_prefix, spec_machine, dir_separator_str,
+  /* Look for tools relative to the location from which the driver is
+     running, or, if that is not available, the configured prefix.  */
+  tooldir_prefix
+    = concat (gcc_exec_prefix ? gcc_exec_prefix : standard_exec_prefix,
+	      spec_machine, dir_separator_str,
 		      spec_version, dir_separator_str, tooldir_prefix, NULL);
 
 	  add_prefix (&exec_prefixes,
-		      concat (gcc_exec_tooldir_prefix, "bin",
-			      dir_separator_str, NULL),
-		      NULL, PREFIX_PRIORITY_LAST, 0, 0);
-	  add_prefix (&startfile_prefixes,
-		      concat (gcc_exec_tooldir_prefix, "lib",
-			      dir_separator_str, NULL),
-		      NULL, PREFIX_PRIORITY_LAST, 0, 1);
-	}
-
-      tooldir_prefix = concat (standard_exec_prefix, spec_machine,
-			       dir_separator_str, spec_version,
-			       dir_separator_str, tooldir_prefix, NULL);
-    }
-
-  add_prefix (&exec_prefixes,
 	      concat (tooldir_prefix, "bin", dir_separator_str, NULL),
 	      "BINUTILS", PREFIX_PRIORITY_LAST, 0, 0);
   add_prefix (&startfile_prefixes,
@@ -4174,14 +4220,24 @@
      ``make_relative_prefix'' is not compiled for VMS, so don't call it.  */
   if (target_system_root && gcc_exec_prefix)
     {
-      char *tmp_prefix = make_relative_prefix (argv[0],
+      char *target_system_root_with_trailing_slash = (char *)target_system_root;
+      char *tmp_prefix;
+      if (target_system_root[strlen(target_system_root)-1] != DIR_SEPARATOR)
+	{
+	  target_system_root_with_trailing_slash = concat (target_system_root, dir_separator_str, NULL);
+	}
+      tmp_prefix = make_relative_prefix (argv_zero,
 					       standard_bindir_prefix,
-					       target_system_root);
+					       target_system_root_with_trailing_slash);
       if (tmp_prefix && access_check (tmp_prefix, F_OK) == 0)
 	{
 	  target_system_root = tmp_prefix;
 	  target_system_root_changed = 1;
 	}
+      if (target_system_root_with_trailing_slash != target_system_root)
+	{
+	  free (target_system_root_with_trailing_slash);
+	}
     }
 #endif
 
@@ -5334,6 +5390,13 @@
 	    }
 	    break;
 
+	  case 'J':
+	    {
+		  do_spec_1 (target_system_root, 1, NULL);
+		  do_spec_1 (" ", 0, NULL);
+	    }
+	    break;
+
 	  case 'o':
 	    {
 	      int max = n_infiles;
@@ -6438,6 +6501,7 @@
   char *specs_file;
   const char *p;
   struct user_specs *uptr;
+  const char* argv_zero = argv[0];
 
   /* APPLE LOCAL begin CC_PRINT_OPTIONS (radar 3313335, 3360444) */
   cc_print_options = getenv ("CC_PRINT_OPTIONS");
@@ -6533,9 +6597,21 @@
   /* Set up to remember the pathname of gcc and any options
      needed for collect.  We use argv[0] instead of programname because
      we need the complete pathname.  */
+#if defined(__linux__) || defined(__CYGWIN__)
+  {
+      char buf[1024];
+      int len;
+      if ((len = readlink("/proc/self/exe", buf, sizeof(buf)-1)) != -1)
+        {
+          buf[len] = '\0';
+          argv_zero = &buf[0];
+        }
+  }
+#endif
+
   obstack_init (&collect_obstack);
   obstack_grow (&collect_obstack, "COLLECT_GCC=", sizeof ("COLLECT_GCC=") - 1);
-  obstack_grow (&collect_obstack, argv[0], strlen (argv[0]) + 1);
+  obstack_grow (&collect_obstack, argv_zero, strlen (argv_zero) + 1);
   putenv (XOBFINISH (&collect_obstack, char *));
 
 #ifdef INIT_ENVIRONMENT
@@ -6681,30 +6757,30 @@
 			      SYSROOT_PRIORITY, 0, 1);
       else if (*cross_compile == '0')
 	{
-	  if (gcc_exec_prefix)
-	    add_prefix (&startfile_prefixes,
-			concat (gcc_exec_prefix, machine_suffix,
-				standard_startfile_prefix, NULL),
-			NULL, PREFIX_PRIORITY_LAST, 0, 1);
 
 	  /* APPLE LOCAL begin ARM sysroot startfile_prefixes */
 	  /* All absolute startfile_prefixes must be sysrooted so we
 	     don't pick up host headers.  */
-	  if (IS_ABSOLUTE_PATH (standard_exec_prefix))
+	  if (IS_ABSOLUTE_PATH (gcc_exec_prefix
+                              ? gcc_exec_prefix : standard_exec_prefix))
 	    add_sysrooted_prefix (&startfile_prefixes,
-				  concat (standard_exec_prefix,
+				  concat (gcc_exec_prefix
+					  ? gcc_exec_prefix : standard_exec_prefix,
 					  machine_suffix,
 					  standard_startfile_prefix, NULL),
 				  NULL, PREFIX_PRIORITY_LAST, 0, 1);
 	  else
 	    add_prefix (&startfile_prefixes,
-			concat (standard_exec_prefix,
+		      concat (gcc_exec_prefix
+			      ? gcc_exec_prefix : standard_exec_prefix,
 				machine_suffix,
 				standard_startfile_prefix, NULL),
 			NULL, PREFIX_PRIORITY_LAST, 0, 1);
 	  /* APPLE LOCAL end ARM sysroot startfile_prefixes */
 	}
 
+      /* Sysrooted prefixes are relocated because target_system_root is
+	 also relocated by gcc_exec_prefix.  */
       if (*standard_startfile_prefix_1)
  	add_sysrooted_prefix (&startfile_prefixes,
 			      standard_startfile_prefix_1, "BINUTILS",
@@ -6750,7 +6826,9 @@
 
   if (print_search_dirs)
     {
-      printf (_("install: %s%s\n"), standard_exec_prefix, machine_suffix);
+      printf (_("install: %s%s\n"),
+	      gcc_exec_prefix ? gcc_exec_prefix : standard_exec_prefix,
+	      gcc_exec_prefix ? "" : machine_suffix);
       printf (_("programs: %s\n"),
 	      build_search_list (&exec_prefixes, "", false, false));
       printf (_("libraries: %s\n"),
--- ../../gcc-5666.3/gcc/config/darwin.h.orig	2010-10-14 21:27:53.000000000 +0100
+++ ../../gcc-5666.3/gcc/config/darwin.h	2012-03-18 16:11:22.093993389 +0000
@@ -347,7 +347,7 @@
 
 #ifdef TARGET_SYSTEM_ROOT
 #define LINK_SYSROOT_SPEC \
-  "%{isysroot*:-syslibroot %*;:-syslibroot " TARGET_SYSTEM_ROOT "}"
+  "%{isysroot*:-syslibroot %*;:-syslibroot %J}"
 #else
 #define LINK_SYSROOT_SPEC "%{isysroot*:-syslibroot %*}"
 #endif
--- ../../gcc-5666.3/gcc/Makefile.in-orig	2012-01-02 15:42:52.484382457 +0000
+++ ../../gcc-5666.3/gcc/Makefile.in	2012-01-02 16:13:35.275336181 +0000
@@ -4057,6 +4057,7 @@
 	@echo "set HOSTCFLAGS \"$(CFLAGS)\"" >> ./tmp0
 	@echo "set TESTING_IN_BUILD_TREE 1" >> ./tmp0
 	@echo "set HAVE_LIBSTDCXX_V3 1" >> ./tmp0
+	@echo "set GCC_EXEC_PREFIX \"$(libdir)/gcc/\"" >> ./tmp0
 # If newlib has been configured, we need to pass -B to gcc so it can find
 # newlib's crt0.o if it exists.  This will cause a "path prefix not used"
 # message if it doesn't, but the testsuite is supposed to ignore the message -
--- ../../gcc-5666.3/gcc/collect2.c.orig	2012-03-17 19:15:47.830956507 +0000
+++ ../../gcc-5666.3/gcc/collect2.c	2012-03-17 19:28:08.425646059 +0000
@@ -802,6 +802,7 @@
   const char **object;
   int first_file;
   int num_c_args	= argc+9;
+  char bin_dir[1024];
 
   no_demangle = !! getenv ("COLLECT_NO_DEMANGLE");
 
@@ -904,6 +905,31 @@
   prefix_from_env ("COMPILER_PATH", &cpath);
   prefix_from_env ("PATH", &path);
 
+  {
+   int slashes = 6;
+#if defined(__linux__) || defined(__CYGWIN__)
+  {
+      int len;
+      if ((len = readlink("/proc/self/exe", bin_dir, sizeof(bin_dir)-1)) != -1)
+        {
+          bin_dir[len] = '\0';
+        }
+  }
+#else
+  strcpy(bin_dir,argv[0]);
+#endif
+  /* From: $PREFIX/libexec/gcc/i686-apple-darwin11/4.2.1/collect2
+   *   to: $PREFIX/bin/
+   *   is: remove 5 /'s then append /bin/
+   */
+   while (--slashes && strrchr (bin_dir,DIR_SEPARATOR))
+   {
+     *strrchr (bin_dir,DIR_SEPARATOR) = '\0';
+   }
+   strcat (bin_dir,"/bin/");
+   add_prefix (&path, bin_dir);
+  }
+
   /* Try to discover a valid linker/nm/strip to use.  */
 
   /* Maybe we know the right file to use (if not cross).  */
