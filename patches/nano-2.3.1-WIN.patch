diff -x *.orig -burN nano-2.3.1-orig/.nanorc nano-2.3.1/.nanorc
--- nano-2.3.1-orig/.nanorc	Thu Jan  1 00:00:00 1970
+++ nano-2.3.1/.nanorc	Sun Jan 15 21:43:30 2012
@@ -0,0 +1,334 @@
+## Sample initialization file for GNU nano.
+##
+## Please note that you must have configured nano with --enable-nanorc
+## for this file to be read!  Also note that this file should not be in
+## DOS or Mac format, and that characters specially interpreted by the
+## shell should not be escaped here.
+##
+## To make sure a value is disabled, use "unset <option>".
+##
+## For the options that take parameters, the default value is given.
+## Other options are unset by default.
+##
+## Quotes inside string parameters don't have to be escaped with
+## backslashes.  The last double quote in the string will be treated as
+## its end.  For example, for the "brackets" option, ""')>]}" will match
+## ", ', ), >, ], and }.
+
+## Use auto-indentation.
+# set autoindent
+
+## Backup files to filename~.
+# set backup
+
+## The directory to put unique backup files in.
+# set backupdir ""
+
+## Do backwards searches by default.
+# set backwards
+
+## Use bold text instead of reverse video text.
+set boldtext
+
+## The characters treated as closing brackets when justifying
+## paragraphs.  They cannot contain blank characters.  Only closing
+## punctuation, optionally followed by closing brackets, can end
+## sentences.
+##
+set brackets ""')>]}"
+
+## Do case sensitive searches by default.
+# set casesensitive
+
+## Constantly display the cursor position in the statusbar.  Note that
+## this overrides "quickblank".
+set const
+
+## Use cut to end of line by default.
+# set cut
+
+## Set the line length for wrapping text and justifying paragraphs.
+## If fill is 0 or less, the line length will be the screen width less
+## this number.
+##
+# set fill -8
+
+## Enable ~/.nano_history for saving and reading search/replace strings.
+set historylog
+
+## The opening and closing brackets that can be found by bracket
+## searches.  They cannot contain blank characters.  The former set must
+## come before the latter set, and both must be in the same order.
+##
+set matchbrackets "(<[{)>]}"
+
+## Use the blank line below the titlebar as extra editing space.
+# set morespace
+
+## Enable mouse support, if available for your system.  When enabled,
+## mouse clicks can be used to place the cursor, set the mark (with a
+## double click), and execute shortcuts.  The mouse will work in the X
+## Window System, and on the console when gpm is running.
+##
+# set mouse
+
+## Allow multiple file buffers (inserting a file will put it into a
+## separate buffer).  You must have configured with --enable-multibuffer
+## for this to work.
+##
+# set multibuffer
+
+## Don't convert files from DOS/Mac format.
+# set noconvert
+
+## Don't follow symlinks when writing files.
+# set nofollow
+
+## Don't display the helpful shortcut lists at the bottom of the screen.
+# set nohelp
+
+## Don't add newlines to the ends of files.
+# set nonewlines
+
+## Don't wrap text at all.
+# set nowrap
+
+## Set operating directory.  nano will not read or write files outside
+## this directory and its subdirectories.  Also, the current directory
+## is changed to here, so any files are inserted from this dir.  A blank
+## string means the operating directory feature is turned off.
+##
+# set operatingdir ""
+
+## Preserve the XON and XOFF keys (^Q and ^S).
+# set preserve
+
+## The characters treated as closing punctuation when justifying
+## paragraphs.  They cannot contain blank characters.  Only closing
+## punctuation, optionally followed by closing brackets, can end
+## sentences.
+##
+# set punct "!.?"
+
+## Do quick statusbar blanking.  Statusbar messages will disappear after
+## 1 keystroke instead of 26.  Note that "const" overrides this.
+##
+# set quickblank
+
+## The email-quote string, used to justify email-quoted paragraphs.
+## This is an extended regular expression if your system supports them,
+## otherwise a literal string.  Default:
+# set quotestr "^([ 	]*[#:>\|}])+"
+## if you have extended regular expression support, otherwise:
+# set quotestr "> "
+
+## Fix Backspace/Delete confusion problem.
+# set rebinddelete
+
+## Fix numeric keypad key confusion problem.
+# set rebindkeypad
+
+## Do extended regular expression searches by default.
+set regexp
+
+## Make the Home key smarter.  When Home is pressed anywhere but at the
+## very beginning of non-whitespace characters on a line, the cursor
+## will jump to that beginning (either forwards or backwards).  If the
+## cursor is already at that position, it will jump to the true
+## beginning of the line.
+# set smarthome
+
+## Use smooth scrolling as the default.
+# set smooth
+
+## Use this spelling checker instead of the internal one.  This option
+## does not properly have a default value.
+##
+set speller "aspell -x -c"
+
+## Allow nano to be suspended.
+set suspend
+
+## Use this tab size instead of the default; it must be greater than 0.
+set tabsize 4
+
+## Convert typed tabs to spaces.
+# set tabstospaces
+
+## Save automatically on exit, don't prompt.
+# set tempfile
+
+## Disallow file modification; why would you want this in an rcfile? ;)
+# set view
+
+## The two single-column characters used to display the first characters
+## of tabs and spaces.  187 in ISO 8859-1 (0000BB in Unicode) and 183 in
+## ISO-8859-1 (0000B7 in Unicode) seem to be good values for these.
+set whitespace ". "
+
+## Detect word boundaries more accurately by treating punctuation
+## characters as part of a word.
+# set wordbounds
+
+
+## Color setup
+##
+## Format:
+##
+## syntax "short description" ["filename regex" ...]
+##
+## The "none" syntax is reserved; specifying it on the command line is
+## the same as not having a syntax at all.  The "default" syntax is
+## special: it takes no filename regexes, and applies to files that
+## don't match any other syntax's filename regexes.
+##
+## color foreground,background "regex" ["regex"...]
+## or
+## icolor foreground,background "regex" ["regex"...]
+##
+## "color" will do case sensitive matches, while "icolor" will do case
+## insensitive matches.
+##
+## Valid colors: white, black, red, blue, green, yellow, magenta, cyan.
+## For foreground colors, you may use the prefix "bright" to get a
+## stronger highlight.
+##
+## To use multi-line regexes, use the start="regex" end="regex"
+## [start="regex" end="regex"...] format.
+##
+## If your system supports transparency, not specifying a background
+## color will use a transparent color.  If you don't want this, be sure
+## to set the background color to black or white.
+##
+## If you wish, you may put your syntaxes in separate files.  You can
+## make use of such files (which can only include "syntax", "color", and
+## "icolor" commands) as follows:
+##
+## include "/path/to/syntax_file.nanorc"
+##
+## Unless otherwise noted, the name of the syntax file (without the
+## ".nanorc" extension) should be the same as the "short description"
+## name inside that file.  These names are kept fairly short to make
+## them easier to remember and faster to type using nano's -Y option.
+##
+## All regexes should be extended regular expressions.
+
+
+## Nanorc files
+include "/usr/local/share/nano/nanorc.nanorc"
+
+## C/C++
+include "/usr/local/share/nano/c.nanorc"
+
+## HTML
+include "/usr/local/share/nano/html.nanorc"
+
+## TeX
+include "/usr/local/share/nano/tex.nanorc"
+
+## Quoted emails (under e.g. mutt)
+include "/usr/local/share/nano/mutt.nanorc"
+
+## Patch files
+include "/usr/local/share/nano/patch.nanorc"
+
+## Manpages
+include "/usr/local/share/nano/man.nanorc"
+
+## Groff
+include "/usr/local/share/nano/groff.nanorc"
+
+## Perl
+include "/usr/local/share/nano/perl.nanorc"
+
+## Python
+include "/usr/local/share/nano/python.nanorc"
+
+## Ruby
+include "/usr/local/share/nano/ruby.nanorc"
+
+## Java
+include "/usr/local/share/nano/java.nanorc"
+
+## Assembler
+include "/usr/local/share/nano/asm.nanorc"
+
+## Bourne shell scripts
+include "/usr/local/share/nano/sh.nanorc"
+
+
+## syntax highlighting in xorg.conf
+##
+syntax "xorg" "xorg\.conf$"
+color brightwhite "(Section|EndSection|Sub[sS]ection|EndSub[sS]ection)"
+# keywords
+color yellow "[^A-Za-z0-9](Identifier|Screen|InputDevice|Option|RightOf|LeftOf|Driver|RgbPath|FontPath|ModulePath|Load|VendorName|ModelName|BoardName|BusID|Device|Monitor|DefaultDepth|View[pP]ort|Depth|Virtual|Modes|Mode|DefaultColorDepth|Modeline|\+vsync|\+hsync|HorizSync|VertRefresh)[^A-Za-z0-9]"
+# numbers
+color magenta "[0-9]"
+# strings
+color green ""(\\.|[^\"])*""
+# comments
+color blue "#.*"
+
+
+##############################################################################
+#
+# Syntax highlighting for XML files
+#
+# Author:  Josef 'Jupp' Schugt, jupp(a)rubyforge.org
+# License: GPL 2  or later
+#
+# Version: 2004-02-25
+#
+##############################################################################
+
+syntax "ml" ".*\.([jrs]?html?|xml|sgml?)$"
+color white "^.+$"
+color green  start="<" end=">"
+color cyan   "<[^> ]+"
+color cyan   ">"
+color yellow start="<!DOCTYPE" end="[/]?>"
+color yellow start="<!--" end="-->"
+color red    "&[^;]*;"
+
+
+
+##############################################################################
+#
+# Syntax highlighting for HTTP codes
+#
+# Author:  Josef 'Jupp' Schugt, jupp(a)rubyforge.org
+# License: GPL 2  or later
+#
+# Version: 2004-02-25
+#
+##############################################################################
+
+syntax "urls"
+color brightmagenta   "^.*$"
+color cyan      "^(1[0-9][0-9]|20[256]|30[45]).*$"
+color green      "^20[03].*$"
+color brightyellow   "^(201|30[0-37]).*$"
+color brightred      "^(204|[45][0-9][0-9]|666).*$"
+
+
+
+
+##############################################################################
+#
+# Syntax highlighting for CSS files
+#  
+# Author:  Simon Rupf, simon.rupf(a)int-ag.ch
+# License: GPL 2  or later
+#
+# Version: 2005-02-14
+#
+##############################################################################
+
+syntax "css" "\.css$"
+color brightred     "."
+color brightyellow  start="\{" end="\}"
+color brightwhite           start=":" end="[;^\{]"
+color brightblue    ":active|:focus|:hover|:link|:visited|:link|:after|:before|$"
+color brightblue    start="\/\*" end="\\*/"
+color green         ";|:|\{|\}"
diff -x *.orig -burN nano-2.3.1-orig/src/Makefile.in nano-2.3.1/src/Makefile.in
--- nano-2.3.1-orig/src/Makefile.in	Sun Jan 15 01:17:55 2012
+++ nano-2.3.1/src/Makefile.in	Sun Jan 15 21:41:05 2012
@@ -527,9 +527,9 @@
 
 
 install-exec-hook:
-	cd $(DESTDIR)$(bindir) && rm -f rnano && $(LN_S) nano rnano
+	cd $(DESTDIR)$(bindir) && rm -f rnano$(EXEEXT) && $(LN_S) nano$(EXEEXT) rnano$(EXEEXT)
 uninstall-hook:
-	cd $(DESTDIR)$(bindir) && rm -f rnano
+	cd $(DESTDIR)$(bindir) && rm -f rnano$(EXEEXT)
 
 # Tell versions [3.59,3.63) of GNU make to not export all variables.
 # Otherwise a system limit (for SysV at least) may be exceeded.
diff -x *.orig -burN nano-2.3.1-orig/src/browser.c nano-2.3.1/src/browser.c
--- nano-2.3.1-orig/src/browser.c	Sun Jan 15 01:17:55 2012
+++ nano-2.3.1/src/browser.c	Sun Jan 15 21:41:05 2012
@@ -651,6 +651,7 @@
 
 	/* Show information about the file.  We don't want to report
 	 * file sizes for links, so we use lstat(). */
+#if !defined(__MINGW32__)
 	if (lstat(filelist[i], &st) == -1 || S_ISLNK(st.st_mode)) {
 	    /* If the file doesn't exist (i.e. it's been deleted while
 	     * the file browser is open), or it's a symlink that doesn't
@@ -663,7 +664,9 @@
 		/* TRANSLATORS: Try to keep this at most 7
 		 * characters. */
 		foo = mallocstrcpy(NULL, _("(dir)"));
-	} else if (S_ISDIR(st.st_mode)) {
+	} else
+#endif
+	if (S_ISDIR(st.st_mode)) {
 	    /* If the file is a directory, display it as such. */
 	    if (strcmp(filetail, "..") == 0) {
 		/* TRANSLATORS: Try to keep this at most 12
diff -x *.orig -burN nano-2.3.1-orig/src/files.c nano-2.3.1/src/files.c
--- nano-2.3.1-orig/src/files.c	Sun Jan 15 01:17:55 2012
+++ nano-2.3.1/src/files.c	Sun Jan 15 21:41:05 2012
@@ -21,16 +21,411 @@
  *                                                                        *
  **************************************************************************/
 
+#if defined(__MINGW32__)
+#define _WIN32_WINNT 0x0600
+#include <windows.h>
+#include <direct.h>
+#include <errno.h>
+#include <fcntl.h>
+#include <sys/stat.h>
+#define DIRSEP '\\'
+#define S_IFDIR _S_IFDIR
+/* mkstemp extracted from libc/sysdeps/posix/tempname.c.  Copyright
+   (C) 1991-1999, 2000, 2001, 2006 Free Software Foundation, Inc.
+
+   The GNU C Library is free software; you can redistribute it and/or
+   modify it under the terms of the GNU Lesser General Public
+   License as published by the Free Software Foundation; either
+   version 2.1 of the License, or (at your option) any later version.  */
+
+static const char letters[] =
+"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789";
+
+/* Generate a temporary file name based on TMPL.  TMPL must match the
+   rules for mk[s]temp (i.e. end in "XXXXXX").  The name constructed
+   does not exist at the time of the call to mkstemp.  TMPL is
+   overwritten with the result.  */
+static int
+mkstemp (char *tmpl)
+{
+  int len;
+  char *XXXXXX;
+  static unsigned long long value;
+  unsigned long long random_time_bits;
+  unsigned int count;
+  int fd = -1;
+  int save_errno = errno;
+
+  /* A lower bound on the number of temporary files to attempt to
+     generate.  The maximum total number of temporary file names that
+     can exist for a given template is 62**6.  It should never be
+     necessary to try all these combinations.  Instead if a reasonable
+     number of names is tried (we define reasonable as 62**3) fail to
+     give the system administrator the chance to remove the problems.  */
+#define ATTEMPTS_MIN (62 * 62 * 62)
+
+  /* The number of times to attempt to generate a temporary file.  To
+     conform to POSIX, this must be no smaller than TMP_MAX.  */
+#if ATTEMPTS_MIN < TMP_MAX
+  unsigned int attempts = TMP_MAX;
+#else
+  unsigned int attempts = ATTEMPTS_MIN;
+#endif
+
+  len = strlen (tmpl);
+  if (len < 6 || strcmp (&tmpl[len - 6], "XXXXXX"))
+    {
+      errno = EINVAL;
+      return -1;
+    }
+
+/* This is where the Xs start.  */
+  XXXXXX = &tmpl[len - 6];
+
+  /* Get some more or less random data.  */
+  {
+    SYSTEMTIME      stNow;
+    FILETIME ftNow;
+
+    // get system time
+    GetSystemTime(&stNow);
+    stNow.wMilliseconds = 500;
+    if (!SystemTimeToFileTime(&stNow, &ftNow))
+    {
+        errno = -1;
+        return -1;
+    }
+
+    random_time_bits = (((unsigned long long)ftNow.dwHighDateTime << 32)
+                        | (unsigned long long)ftNow.dwLowDateTime);
+  }
+  value += random_time_bits ^ (unsigned long long)GetCurrentThreadId ();
+
+  for (count = 0; count < attempts; value += 7777, ++count)
+    {
+      unsigned long long v = value;
+
+      /* Fill in the random bits.  */
+      XXXXXX[0] = letters[v % 62];
+      v /= 62;
+      XXXXXX[1] = letters[v % 62];
+      v /= 62;
+      XXXXXX[2] = letters[v % 62];
+      v /= 62;
+      XXXXXX[3] = letters[v % 62];
+      v /= 62;
+      XXXXXX[4] = letters[v % 62];
+      v /= 62;
+      XXXXXX[5] = letters[v % 62];
+
+      fd = open (tmpl, O_RDWR | O_CREAT | O_EXCL, _S_IREAD | _S_IWRITE);
+      if (fd >= 0)
+    {
+      errno = save_errno;
+      return fd;
+    }
+      else if (errno != EEXIST)
+    return -1;
+    }
+
+  /* We got out of the loop because we ran out of combinations to try.  */
+  errno = EEXIST;
+  return -1;
+}
+#endif
+
+
 #include "proto.h"
 
 #include <stdio.h>
 #include <string.h>
+
 #include <unistd.h>
 #include <utime.h>
 #include <fcntl.h>
 #include <errno.h>
 #include <ctype.h>
+#if !defined(__MINGW32__)
 #include <pwd.h>
+#else
+/* Provide a more complete sys/stat header file.
+   Copyright (C) 2006 Free Software Foundation, Inc.
+
+   This program is free software; you can redistribute it and/or modify
+   it under the terms of the GNU General Public License as published by
+   the Free Software Foundation; either version 2, or (at your option)
+   any later version.
+
+   This program is distributed in the hope that it will be useful,
+   but WITHOUT ANY WARRANTY; without even the implied warranty of
+   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+   GNU General Public License for more details.
+
+   You should have received a copy of the GNU General Public License
+   along with this program; if not, write to the Free Software Foundation,
+   Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.  */
+
+/* Written by Eric Blake, Paul Eggert, and Jim Meyering.  */
+
+#ifndef _gl_SYS_STAT_H
+#define _gl_SYS_STAT_H
+
+/* This file is supposed to be used on platforms where <sys/stat.h> is
+   incomplete.  It is intended to provide definitions and prototypes
+   needed by an application.  Start with what the system provides.  */
+
+#ifndef S_IFMT
+# define S_IFMT 0170000
+#endif
+
+#if STAT_MACROS_BROKEN
+# undef S_ISBLK
+# undef S_ISCHR
+# undef S_ISDIR
+# undef S_ISFIFO
+# undef S_ISLNK
+# undef S_ISNAM
+# undef S_ISMPB
+# undef S_ISMPC
+# undef S_ISNWK
+# undef S_ISREG
+# undef S_ISSOCK
+#endif
+
+#ifndef S_ISBLK
+# ifdef S_IFBLK
+#  define S_ISBLK(m) (((m) & S_IFMT) == S_IFBLK)
+# else
+#  define S_ISBLK(m) 0
+# endif
+#endif
+
+#ifndef S_ISCHR
+# ifdef S_IFCHR
+#  define S_ISCHR(m) (((m) & S_IFMT) == S_IFCHR)
+# else
+#  define S_ISCHR(m) 0
+# endif
+#endif
+
+#ifndef S_ISDIR
+# ifdef S_IFDIR
+#  define S_ISDIR(m) (((m) & S_IFMT) == S_IFDIR)
+# else
+#  define S_ISDIR(m) 0
+# endif
+#endif
+
+#ifndef S_ISDOOR /* Solaris 2.5 and up */
+# define S_ISDOOR(m) 0
+#endif
+
+#ifndef S_ISFIFO
+# ifdef S_IFIFO
+#  define S_ISFIFO(m) (((m) & S_IFMT) == S_IFIFO)
+# else
+#  define S_ISFIFO(m) 0
+# endif
+#endif
+
+#ifndef S_ISLNK
+# ifdef S_IFLNK
+#  define S_ISLNK(m) (((m) & S_IFMT) == S_IFLNK)
+# else
+#  define S_ISLNK(m) 0
+# endif
+#endif
+
+#ifndef S_ISMPB /* V7 */
+# ifdef S_IFMPB
+#  define S_ISMPB(m) (((m) & S_IFMT) == S_IFMPB)
+#  define S_ISMPC(m) (((m) & S_IFMT) == S_IFMPC)
+# else
+#  define S_ISMPB(m) 0
+#  define S_ISMPC(m) 0
+# endif
+#endif
+
+#ifndef S_ISNAM /* Xenix */
+# ifdef S_IFNAM
+#  define S_ISNAM(m) (((m) & S_IFMT) == S_IFNAM)
+# else
+#  define S_ISNAM(m) 0
+# endif
+#endif
+
+#ifndef S_ISNWK /* HP/UX */
+# ifdef S_IFNWK
+#  define S_ISNWK(m) (((m) & S_IFMT) == S_IFNWK)
+# else
+#  define S_ISNWK(m) 0
+# endif
+#endif
+
+#ifndef S_ISPORT /* Solaris 10 and up */
+# define S_ISPORT(m) 0
+#endif
+
+#ifndef S_ISREG
+# ifdef S_IFREG
+#  define S_ISREG(m) (((m) & S_IFMT) == S_IFREG)
+# else
+#  define S_ISREG(m) 0
+# endif
+#endif
+
+#ifndef S_ISSOCK
+# ifdef S_IFSOCK
+#  define S_ISSOCK(m) (((m) & S_IFMT) == S_IFSOCK)
+# else
+#  define S_ISSOCK(m) 0
+# endif
+#endif
+
+
+#ifndef S_TYPEISMQ
+# define S_TYPEISMQ(p) 0
+#endif
+
+#ifndef S_TYPEISTMO
+# define S_TYPEISTMO(p) 0
+#endif
+
+
+#ifndef S_TYPEISSEM
+# ifdef S_INSEM
+#  define S_TYPEISSEM(p) (S_ISNAM ((p)->st_mode) && (p)->st_rdev == S_INSEM)
+# else
+#  define S_TYPEISSEM(p) 0
+# endif
+#endif
+
+#ifndef S_TYPEISSHM
+# ifdef S_INSHD
+#  define S_TYPEISSHM(p) (S_ISNAM ((p)->st_mode) && (p)->st_rdev == S_INSHD)
+# else
+#  define S_TYPEISSHM(p) 0
+# endif
+#endif
+
+/* high performance ("contiguous data") */
+#ifndef S_ISCTG
+# define S_ISCTG(p) 0
+#endif
+
+/* Cray DMF (data migration facility): off line, with data  */
+#ifndef S_ISOFD
+# define S_ISOFD(p) 0
+#endif
+
+/* Cray DMF (data migration facility): off line, with no data  */
+#ifndef S_ISOFL
+# define S_ISOFL(p) 0
+#endif
+
+/* 4.4BSD whiteout */
+#ifndef S_ISWHT
+# define S_ISWHT(m) 0
+#endif
+
+/* If any of the following are undefined,
+   define them to their de facto standard values.  */
+#if !S_ISUID
+# define S_ISUID 04000
+#endif
+#if !S_ISGID
+# define S_ISGID 02000
+#endif
+
+/* S_ISVTX is a common extension to POSIX.  */
+#ifndef S_ISVTX
+# define S_ISVTX 01000
+#endif
+
+#if !S_IRUSR && S_IREAD
+# define S_IRUSR S_IREAD
+#endif
+#if !S_IRUSR
+# define S_IRUSR 00400
+#endif
+#if !S_IRGRP
+# define S_IRGRP (S_IRUSR >> 3)
+#endif
+#if !S_IROTH
+# define S_IROTH (S_IRUSR >> 6)
+#endif
+
+#if !S_IWUSR && S_IWRITE
+# define S_IWUSR S_IWRITE
+#endif
+#if !S_IWUSR
+# define S_IWUSR 00200
+#endif
+#if !S_IWGRP
+# define S_IWGRP (S_IWUSR >> 3)
+#endif
+#if !S_IWOTH
+# define S_IWOTH (S_IWUSR >> 6)
+#endif
+
+#if !S_IXUSR && S_IEXEC
+# define S_IXUSR S_IEXEC
+#endif
+#if !S_IXUSR
+# define S_IXUSR 00100
+#endif
+#if !S_IXGRP
+# define S_IXGRP (S_IXUSR >> 3)
+#endif
+#if !S_IXOTH
+# define S_IXOTH (S_IXUSR >> 6)
+#endif
+
+#if !S_IRWXU
+# define S_IRWXU (S_IRUSR | S_IWUSR | S_IXUSR)
+#endif
+#if !S_IRWXG
+# define S_IRWXG (S_IRGRP | S_IWGRP | S_IXGRP)
+#endif
+#if !S_IRWXO
+# define S_IRWXO (S_IROTH | S_IWOTH | S_IXOTH)
+#endif
+
+/* S_IXUGO is a common extension to POSIX.  */
+#if !S_IXUGO
+# define S_IXUGO (S_IXUSR | S_IXGRP | S_IXOTH)
+#endif
+
+#ifndef S_IRWXUGO
+# define S_IRWXUGO (S_IRWXU | S_IRWXG | S_IRWXO)
+#endif
+
+/* mingw does not support symlinks, therefore it does not have lstat.  But
+   without links, stat does just fine.  */
+#if ! HAVE_LSTAT
+# define lstat stat
+#endif
+
+/* mingw's _mkdir() function has 1 argument, but we pass 2 arguments.
+   Additionally, it declares _mkdir (and depending on compile flags, an
+   alias mkdir), only in the nonstandard io.h.  */
+# include <io.h>
+
+static inline int
+rpl_mkdir (char const *name, mode_t mode)
+{
+  return _mkdir (name);
+}
+
+# define mkdir rpl_mkdir
+
+#endif /* _gl_SYS_STAT_H */
+struct passwd {
+	char *pw_name;
+	char *pw_gecos;
+	char *pw_dir;
+};
+#endif
 
 /* Add an entry to the openfile openfilestruct.  This should only be
  * called from open_buffer(). */
@@ -1647,6 +2042,7 @@
 	    goto cleanup_and_exit;
 	}
 
+#if !defined(__MINGW32__)
         /* We shouldn't worry about chown()ing something if we're not
 	   root, since it's likely to fail! */
 	if (geteuid() == NANO_ROOT_UID && fchown(backup_fd,
@@ -1675,6 +2071,7 @@
 	       means we could lose both the backup and the original! */
 	    goto cleanup_and_exit;
 	}
+#endif
 
 #ifdef DEBUG
 	fprintf(stderr, "Backing up %s to %s\n", realname, backupname);
@@ -2258,6 +2655,10 @@
 	    ;
 
 	/* Get the home directory. */
+#if defined(__MINGW32__)
+    get_homedir();
+    tilde_dir = mallocstrcpy(NULL, homedir);
+#else
 	if (i == 1) {
 	    get_homedir();
 	    tilde_dir = mallocstrcpy(NULL, homedir);
@@ -2275,6 +2676,7 @@
 	    if (userdata != NULL)
 		tilde_dir = mallocstrcpy(tilde_dir, userdata->pw_dir);
 	}
+#endif
 
 	retval = charalloc(strlen(tilde_dir) + strlen(buf + i) + 1);
 	sprintf(retval, "%s%s", tilde_dir, buf + i);
@@ -2370,12 +2772,11 @@
     assert(buf != NULL && num_matches != NULL && buf_len > 0);
 
     *num_matches = 0;
-
+#if !defined(__MINGW32__)
     while ((userdata = getpwent()) != NULL) {
 	if (strncmp(userdata->pw_name, buf + 1, buf_len - 1) == 0) {
 	    /* Cool, found a match.  Add it to the list.  This makes a
 	     * lot more sense to me (Chris) this way... */
-
 #ifndef DISABLE_OPERATINGDIR
 	    /* ...unless the match exists outside the operating
 	     * directory, in which case just go to the next match. */
@@ -2392,6 +2793,7 @@
 	}
     }
     endpwent();
+#endif
 
     return matches;
 }
diff -x *.orig -burN nano-2.3.1-orig/src/global.c nano-2.3.1/src/global.c
--- nano-2.3.1-orig/src/global.c	Sun Jan 15 01:17:55 2012
+++ nano-2.3.1/src/global.c	Sun Jan 15 21:41:05 2012
@@ -269,7 +269,7 @@
     else if (str[0] ==  'F' || str[0] == 'F')
         return FKEY;
     else
-	return RAWINPUT;
+	return RAWINPUTNANO;
 }
 
 /* Add a string to the new function list strict.
@@ -398,7 +398,7 @@
     } else if (s->type == FKEY) {
         assert(strlen(s->keystr) > 1);
         s->seq = KEY_F0 + atoi(&s->keystr[1]);
-    } else /* RAWINPUT */
+    } else /* RAWINPUTNANO */
         s->seq = (int) s->keystr[0];
 
     /* Override some keys which don't bind as nicely as we'd like */
@@ -406,32 +406,32 @@
 	s->seq = 0;
     else if (s->type == META && (!strcasecmp(&s->keystr[2], "space")))
 	s->seq = (int) ' ';
-    else if (s->type == RAWINPUT && (!strcasecmp(s->keystr, "kup")))
+    else if (s->type == RAWINPUTNANO && (!strcasecmp(s->keystr, "kup")))
 	s->seq = KEY_UP;
-    else if (s->type == RAWINPUT && (!strcasecmp(s->keystr, "kdown")))
+    else if (s->type == RAWINPUTNANO && (!strcasecmp(s->keystr, "kdown")))
 	s->seq = KEY_DOWN;
-    else if (s->type == RAWINPUT && (!strcasecmp(s->keystr, "kleft")))
+    else if (s->type == RAWINPUTNANO && (!strcasecmp(s->keystr, "kleft")))
 	s->seq = KEY_LEFT;
-    else if (s->type == RAWINPUT && (!strcasecmp(s->keystr, "kright")))
+    else if (s->type == RAWINPUTNANO && (!strcasecmp(s->keystr, "kright")))
 	s->seq = KEY_RIGHT;
-    else if (s->type == RAWINPUT && (!strcasecmp(s->keystr, "kinsert")))
+    else if (s->type == RAWINPUTNANO && (!strcasecmp(s->keystr, "kinsert")))
 	s->seq = KEY_IC;
-    else if (s->type == RAWINPUT && (!strcasecmp(s->keystr, "kdel")))
+    else if (s->type == RAWINPUTNANO && (!strcasecmp(s->keystr, "kdel")))
 	s->seq = KEY_DC;
-    else if (s->type == RAWINPUT && (!strcasecmp(s->keystr, "kbsp")))
+    else if (s->type == RAWINPUTNANO && (!strcasecmp(s->keystr, "kbsp")))
 	s->seq = KEY_BACKSPACE;
-    else if (s->type == RAWINPUT && (!strcasecmp(s->keystr, "kenter")))
+    else if (s->type == RAWINPUTNANO && (!strcasecmp(s->keystr, "kenter")))
 	s->seq = KEY_ENTER;
-    else if (s->type == RAWINPUT && (!strcasecmp(s->keystr, "kpup")))
+    else if (s->type == RAWINPUTNANO && (!strcasecmp(s->keystr, "kpup")))
 	s->seq = KEY_PPAGE;
-    else if (s->type == RAWINPUT && (!strcasecmp(s->keystr, "kpdown")))
+    else if (s->type == RAWINPUTNANO && (!strcasecmp(s->keystr, "kpdown")))
 	s->seq = KEY_NPAGE;
 #ifdef KEY_HOME
-    else if (s->type == RAWINPUT && (!strcasecmp(s->keystr, "khome")))
+    else if (s->type == RAWINPUTNANO && (!strcasecmp(s->keystr, "khome")))
 	s->seq = KEY_HOME;
 #endif
 #ifdef KEY_END
-    else if (s->type == RAWINPUT && (!strcasecmp(s->keystr, "kend")))
+    else if (s->type == RAWINPUTNANO && (!strcasecmp(s->keystr, "kend")))
 	s->seq = KEY_END;
 #endif
 
diff -x *.orig -burN nano-2.3.1-orig/src/help.c nano-2.3.1/src/help.c
--- nano-2.3.1-orig/src/help.c	Sun Jan 15 01:17:55 2012
+++ nano-2.3.1/src/help.c	Sun Jan 15 21:41:05 2012
@@ -446,7 +446,7 @@
             if (scsfound == 3)
 		continue;
 
-            if (s->type == RAWINPUT)
+            if (s->type == RAWINPUTNANO)
 		continue;
 
 	    if ((s->menu & currmenu) == 0)
diff -x *.orig -burN nano-2.3.1-orig/src/nano.c nano-2.3.1/src/nano.c
--- nano-2.3.1-orig/src/nano.c	Sun Jan 15 01:17:55 2012
+++ nano-2.3.1/src/nano.c	Sun Jan 15 21:41:05 2012
@@ -36,13 +36,18 @@
 #ifdef ENABLE_UTF8
 #include <langinfo.h>
 #endif
-#include <termios.h>
+//#include <termios.h>
 #ifdef HAVE_GETOPT_H
 #include <getopt.h>
 #endif
 #ifndef NANO_TINY
+#if defined(__MINGW32__)
+#include <io.h>
+#include <pthread.h>
+#else
 #include <sys/ioctl.h>
 #endif
+#endif
 
 #ifndef DISABLE_MOUSE
 static int oldinterval = -1;
@@ -52,9 +57,9 @@
 static bool no_rcfiles = FALSE;
 	/* Should we ignore all rcfiles? */
 #endif
-static struct termios oldterm;
+//static struct termios oldterm;
 	/* The user's original terminal settings. */
-static struct sigaction act;
+//static struct sigaction act;
 	/* Used to set up all our fun signal handlers. */
 
 /* Create a new filestruct node.  Note that we do not set prevnode->next
@@ -600,7 +605,7 @@
     endwin();
 
     /* Restore the old terminal settings. */
-    tcsetattr(0, TCSANOW, &oldterm);
+//    tcsetattr(0, TCSANOW, &oldterm);
 
 #if !defined(NANO_TINY) && defined(ENABLE_NANORC)
     if (!no_rcfiles && ISSET(HISTORYLOG))
@@ -627,7 +632,7 @@
     endwin();
 
     /* Restore the old terminal settings. */
-    tcsetattr(0, TCSANOW, &oldterm);
+//    tcsetattr(0, TCSANOW, &oldterm);
 
     va_start(ap, msg);
     vfprintf(stderr, msg, ap);
@@ -711,7 +716,9 @@
     if (die_stat) {
 	int shush;
 	shush = chmod(retval, die_stat->st_mode);
+#if !defined(__MINGW32__)
 	shush = chown(retval, die_stat->st_uid, die_stat->st_gid);
+#endif
     }
 #endif
 
@@ -1077,7 +1084,7 @@
     ;
 }
 
-static struct sigaction pager_oldaction, pager_newaction;  /* Original and temporary handlers for SIGINT. */
+//static struct sigaction pager_oldaction, pager_newaction;  /* Original and temporary handlers for SIGINT. */
 static bool pager_sig_failed = FALSE; /* Did sigaction() fail without changing the signal handlers? */
 static bool pager_input_aborted = FALSE; /* Did someone invoke the pager and abort it via ^C? */
 
@@ -1101,10 +1108,10 @@
 
     dup2(ttystdin,0);
     close(ttystdin);
-    if (!pager_input_aborted)
-	tcgetattr(0, &oldterm);
-    if (!pager_sig_failed && sigaction(SIGINT, &pager_oldaction, NULL) == -1)
-        nperror("sigaction");
+//    if (!pager_input_aborted)
+//	tcgetattr(0, &oldterm);
+//    if (!pager_sig_failed && sigaction(SIGINT, &pager_oldaction, NULL) == -1)
+//        nperror("sigaction");
     terminal_init();
     doupdate();
 }
@@ -1121,8 +1128,8 @@
 void stdin_pager(void)
 {
     endwin();
-    if (!pager_input_aborted)
-	tcsetattr(0, TCSANOW, &oldterm);
+//    if (!pager_input_aborted)
+//	tcsetattr(0, TCSANOW, &oldterm);
     fprintf(stderr, _("Reading from stdin, ^C to abort\n"));
 
     /* Set things up so that Ctrl-C will cancel the new process. */
@@ -1132,26 +1139,26 @@
     enable_signals();
 #endif
 
-    if (sigaction(SIGINT, NULL, &pager_newaction) == -1) {
-	pager_sig_failed = TRUE;
-	nperror("sigaction");
-    } else {
-	pager_newaction.sa_handler = cancel_stdin_pager;
-	if (sigaction(SIGINT, &pager_newaction, &pager_oldaction) == -1) {
-	    pager_sig_failed = TRUE;
-	    nperror("sigaction");
-	}
-    }
+//    if (sigaction(SIGINT, NULL, &pager_newaction) == -1) {
+//	pager_sig_failed = TRUE;
+//	nperror("sigaction");
+//    } else {
+//	pager_newaction.sa_handler = cancel_stdin_pager;
+//	if (sigaction(SIGINT, &pager_newaction, &pager_oldaction) == -1) {
+//	    pager_sig_failed = TRUE;
+//	    nperror("sigaction");
+//	}
+//    }
 
     open_buffer("", FALSE);
     finish_stdin_pager();
 }
 
 
-
 /* Initialize the signal handlers. */
 void signal_init(void)
 {
+#if 0
     /* Trap SIGINT and SIGQUIT because we want them to do useful
      * things. */
     memset(&act, 0, sizeof(struct sigaction));
@@ -1186,6 +1193,7 @@
 	act.sa_handler = do_continue;
 	sigaction(SIGCONT, &act, NULL);
     }
+#endif
 }
 
 /* Handler for SIGHUP (hangup) and SIGTERM (terminate). */
@@ -1217,16 +1225,20 @@
     fflush(stdout);
 
     /* Restore the old terminal settings. */
-    tcsetattr(0, TCSANOW, &oldterm);
+//    tcsetattr(0, TCSANOW, &oldterm);
 
     /* Trap SIGHUP and SIGTERM so we can properly deal with them while
      * suspended. */
-    act.sa_handler = handle_hupterm;
-    sigaction(SIGHUP, &act, NULL);
-    sigaction(SIGTERM, &act, NULL);
+//    act.sa_handler = handle_hupterm;
+//    sigaction(SIGHUP, &act, NULL);
+//    sigaction(SIGTERM, &act, NULL);
 
     /* Do what mutt does: send ourselves a SIGSTOP. */
+#if defined(__MINGW32__)
+    exit(0);
+#else
     kill(0, SIGSTOP);
+#endif
 }
 
 /* the subnfunc version */
@@ -1268,8 +1280,9 @@
 /* Handler for SIGWINCH (window size change). */
 RETSIGTYPE handle_sigwinch(int signal)
 {
-    const char *tty = ttyname(0);
     int fd, result = 0;
+#if !defined(__MINGW32__)
+    const char *tty = ttyname(0);
     struct winsize win;
 
     if (tty == NULL)
@@ -1290,6 +1303,7 @@
     COLS = win.ws_col;
     LINES = win.ws_row;
 #endif
+#endif
 
     /* If we've partitioned the filestruct, unpartition it now. */
     if (filepart != NULL)
@@ -1326,9 +1340,11 @@
     currmenu = MMAIN;
     total_refresh();
 
+#if !defined(__MINGW32__)
     /* Jump back to either main() or the unjustify routine in
      * do_justify(). */
     siglongjmp(jump_buf, 1);
+#endif
 }
 
 /* If allow is TRUE, block any SIGWINCH signals that we get, so that we
@@ -1336,10 +1352,12 @@
  * signals that we have, so that we can deal with them now. */
 void allow_pending_sigwinch(bool allow)
 {
+#if !defined(__MINGW32__)
     sigset_t winch;
     sigemptyset(&winch);
     sigaddset(&winch, SIGWINCH);
     sigprocmask(allow ? SIG_UNBLOCK : SIG_BLOCK, &winch, NULL);
+#endif
 }
 #endif /* !NANO_TINY */
 
@@ -1410,23 +1428,23 @@
  * settings. */
 void disable_extended_io(void)
 {
-    struct termios term;
+//    struct termios term;
 
-    tcgetattr(0, &term);
-    term.c_lflag &= ~IEXTEN;
-    term.c_oflag &= ~OPOST;
-    tcsetattr(0, TCSANOW, &term);
+//    tcgetattr(0, &term);
+//    term.c_lflag &= ~IEXTEN;
+//    term.c_oflag &= ~OPOST;
+//    tcsetattr(0, TCSANOW, &term);
 }
 
 /* Disable interpretation of the special control keys in our terminal
  * settings. */
 void disable_signals(void)
 {
-    struct termios term;
+//    struct termios term;
 
-    tcgetattr(0, &term);
-    term.c_lflag &= ~ISIG;
-    tcsetattr(0, TCSANOW, &term);
+//    tcgetattr(0, &term);
+//    term.c_lflag &= ~ISIG;
+//    tcsetattr(0, TCSANOW, &term);
 }
 
 #ifndef NANO_TINY
@@ -1434,11 +1452,13 @@
  * settings. */
 void enable_signals(void)
 {
+#if !defined(__MINGW32__)
     struct termios term;
 
     tcgetattr(0, &term);
     term.c_lflag |= ISIG;
     tcsetattr(0, TCSANOW, &term);
+#endif
 }
 #endif
 
@@ -1446,22 +1466,22 @@
  * settings. */
 void disable_flow_control(void)
 {
-    struct termios term;
+//    struct termios term;
 
-    tcgetattr(0, &term);
-    term.c_iflag &= ~IXON;
-    tcsetattr(0, TCSANOW, &term);
+//    tcgetattr(0, &term);
+//    term.c_iflag &= ~IXON;
+//    tcsetattr(0, TCSANOW, &term);
 }
 
 /* Enable interpretation of the flow control characters in our terminal
  * settings. */
 void enable_flow_control(void)
 {
-    struct termios term;
+//    struct termios term;
 
-    tcgetattr(0, &term);
-    term.c_iflag |= IXON;
-    tcsetattr(0, TCSANOW, &term);
+//    tcgetattr(0, &term);
+//    term.c_iflag |= IXON;
+//    tcsetattr(0, TCSANOW, &term);
 }
 
 /* Set up the terminal state.  Put the terminal in raw mode (read one
@@ -2563,7 +2583,7 @@
 	tabsize = WIDTH_OF_TAB;
 
     /* Back up the old terminal settings so that they can be restored. */
-    tcgetattr(0, &oldterm);
+//    tcgetattr(0, &oldterm);
 
     /* Initialize curses mode.  If this fails, get out. */
     if (initscr() == NULL)
diff -x *.orig -burN nano-2.3.1-orig/src/nano.h nano-2.3.1/src/nano.h
--- nano-2.3.1-orig/src/nano.h	Sun Jan 15 01:17:55 2012
+++ nano-2.3.1/src/nano.h	Sun Jan 15 21:41:05 2012
@@ -182,7 +182,7 @@
 } update_type;
 
 typedef enum {
-    CONTROL, META, FKEY, RAWINPUT
+    CONTROL, META, FKEY, RAWINPUTNANO
 }  function_type;
 
 typedef enum {
@@ -790,5 +790,10 @@
 
 /* The maximum number of bytes buffered at one time. */
 #define MAX_BUF_SIZE 128
+
+#if defined(__MINGW32__)
+#define sigsetjmp(jbuf, flag)  setjmp(jbuf)
+#define sigjmp_buf jmp_buf
+#endif
 
 #endif /* !NANO_H */
diff -x *.orig -burN nano-2.3.1-orig/src/text.c nano-2.3.1/src/text.c
--- nano-2.3.1-orig/src/text.c	Sun Jan 15 01:17:55 2012
+++ nano-2.3.1/src/text.c	Sun Jan 15 21:41:05 2012
@@ -28,7 +28,9 @@
 #include <unistd.h>
 #include <string.h>
 #include <fcntl.h>
+#if !defined(__MINGW32__)
 #include <sys/wait.h>
+#endif
 #include <errno.h>
 
 #ifndef NANO_TINY
@@ -751,13 +753,16 @@
  * execute_command(). */
 RETSIGTYPE cancel_command(int signal)
 {
+#if !defined(__MINGW32__)
     if (kill(pid, SIGKILL) == -1)
 	nperror("kill");
+#endif
 }
 
 /* Execute command in a shell.  Return TRUE on success. */
 bool execute_command(const char *command)
 {
+#if !defined(__MINGW32__)
     int fd[2];
     FILE *f;
     char *shellenv;
@@ -838,6 +843,9 @@
     terminal_init();
 
     return TRUE;
+#else
+    return FALSE;
+#endif
 }
 
 /* Add a new undo struct to the top of the current pile */
@@ -2541,6 +2549,9 @@
  * termination, and the error string otherwise. */
 const char *do_int_speller(const char *tempfile_name)
 {
+#if defined(__MINGW32__)
+    return NULL;
+#else
     char *read_buff, *read_buff_ptr, *read_buff_word;
     size_t pipe_buff_size, read_buff_size, read_buff_read, bytesread;
     int spell_fd[2], sort_fd[2], uniq_fd[2], tempfile_fd = -1;
@@ -2716,12 +2727,16 @@
     close(uniq_fd[0]);
     close(uniq_fd[1]);
     exit(1);
+#endif
 }
 
 /* External (alternate) spell checking.  Return NULL for normal
  * termination, and the error string otherwise. */
 const char *do_alt_speller(char *tempfile_name)
 {
+#if defined(__MINGW32__)
+    return NULL;
+#else
     int alt_spell_status;
     size_t current_x_save = openfile->current_x;
     size_t pww_save = openfile->placewewant;
@@ -2914,6 +2929,7 @@
 #endif
 
     return NULL;
+#endif
 }
 
 /* Spell check the current file.  If an alternate spell checker is
diff -x *.orig -burN nano-2.3.1-orig/src/utils.c nano-2.3.1/src/utils.c
--- nano-2.3.1-orig/src/utils.c	Sun Jan 15 01:17:55 2012
+++ nano-2.3.1/src/utils.c	Sun Jan 15 21:41:05 2012
@@ -26,7 +26,9 @@
 #include <string.h>
 #include <stdio.h>
 #include <unistd.h>
+#if !defined(__MINGW32__)
 #include <pwd.h>
+#endif
 #include <ctype.h>
 #include <errno.h>
 
@@ -51,13 +53,14 @@
 {
     if (homedir == NULL) {
 	const char *homenv = getenv("HOME");
-
+#if !defined(__MINGW32__)
 	if (homenv == NULL) {
 	    const struct passwd *userage = getpwuid(geteuid());
 
 	    if (userage != NULL)
 		homenv = userage->pw_dir;
 	}
+#endif
 	homedir = mallocstrcpy(NULL, homenv);
     }
 }
